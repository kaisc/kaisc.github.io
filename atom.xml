<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Markin HOME</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://markindev.github.io/"/>
  <updated>2016-02-16T10:34:57.000Z</updated>
  <id>http://markindev.github.io/</id>
  
  <author>
    <name>Jingkai Mao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rust in Details Part 1</title>
    <link href="http://markindev.github.io/2016/02/15/Rust-in-Details-Part-1/"/>
    <id>http://markindev.github.io/2016/02/15/Rust-in-Details-Part-1/</id>
    <published>2016-02-15T11:58:04.000Z</published>
    <updated>2016-02-16T10:34:57.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;http://markindev.github.io/2016/02/15/Rust-in-Details-Part-1/&quot;&gt;此篇&lt;/a&gt;文章翻译自&lt;a href=&quot;http://nbaksalyar.github.io/2015/11/09/rust-in-detail-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rust-In-Details&lt;/a&gt;，已获得作者许可。转载或二次创作请保留本信息。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了更好的了解如何使用Rust来解决一些实际问题，我们将在本系列文章中，逐步的尝试使用Rust来编写一个可扩展的、实时的聊天服务。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Part 1&lt;/em&gt;包含了一些基本的项目配置，和一个简单的Websocket服务器框架。这篇文章相当的深入浅出，并不需要读者有太多关于Rust的背景知识。当然，如果你熟悉POSIX API或者是C/C++，那么肯定会极大的有助于深入理解。最后，这是一篇相当长、而且面向底层的教程，我推荐你先准备上一杯好咖啡。&lt;/p&gt;
&lt;p&gt;好了，让我们开始吧！&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Part-1-实现Websocket协议&quot;&gt;&lt;a href=&quot;#Part-1-实现Websocket协议&quot; class=&quot;headerlink&quot; title=&quot;Part 1: 实现Websocket协议.&quot;&gt;&lt;/a&gt;Part 1: 实现Websocket协议.&lt;/h2&gt;&lt;h2 id=&quot;Table-of-Contents&quot;&gt;&lt;a href=&quot;#Table-of-Contents&quot; class=&quot;headerlink&quot; title=&quot;Table of Contents&quot;&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#why-rust&quot;&gt;为什么是Rust?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#goals&quot;&gt;目标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#approaches-to-io&quot;&gt;关于I/O的初步考量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#event-loop&quot;&gt;事件循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#starting-project&quot;&gt;初始化工程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#event-loop-in-rust&quot;&gt;Rust中的事件循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tcp-server&quot;&gt;TCP服务器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#accepting-connections&quot;&gt;接受连接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#parsing-http&quot;&gt;解析HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#handshake&quot;&gt;握手&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;相关资源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#notes&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a name=&quot;why-rust&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-为什么是Rust&quot;&gt;&lt;a href=&quot;#1-为什么是Rust&quot; class=&quot;headerlink&quot; title=&quot;1 为什么是Rust?&quot;&gt;&lt;/a&gt;1 为什么是Rust?&lt;/h2&gt;&lt;p&gt;出于对系统编程的兴趣，我开始留意到Rust这门新生语言。底层开发总是带给我各式各样的挑战和满足，在这个领域有一个很常见的共识，那就是：由于众多不起眼的陷阱，正确的做对一件事情往往是非常困难的。&lt;/p&gt;
&lt;img src=&quot;/2016/02/15/Rust-in-Details-Part-1/rust-logo.png&quot; alt=&quot;rust-logo&quot; title=&quot;rust-logo&quot;&gt;
&lt;p&gt;最常见的陷阱莫过于内存安全。它可能导致一系列诸如&lt;a href=&quot;https://en.wikipedia.org/wiki/Buffer_overflow&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;缓存溢出&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_leak&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;内存泄露&lt;/a&gt;、&lt;a href=&quot;http://stackoverflow.com/questions/21057393/what-does-double-free-mean&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Double Free&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/Dangling_pointer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;野指针&lt;/a&gt;等让人头疼的问题。一个较为有名的例子便是OpenSSL中出现的&lt;a href=&quot;http://heartbleed.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Headerbleed&lt;/a&gt; Bug，它就是由于不恰当的内存管理而导致的。出于同样的陷阱，也许还有更多更严重的Bug存在于这些软件之中也并不让人奇怪。&lt;/p&gt;
&lt;p&gt;当然，在C++中我们有不少的工具和法则诸如智能指针[&lt;a href=&quot;#ref-1&quot;&gt;1&lt;/a&gt;]、On-Stack Allocation[&lt;a href=&quot;#ref-2&quot;&gt;2&lt;/a&gt;]等来试图解决问题。但遗憾的是，这些处理方式并不是建立在语言层面的。为了获得正确的行为，它假设所有的相关开发者，都能够正确理解并坚决的执行统一的设计。当代码库越来越庞大，参与人员越来越多，为了在庞大的Codebase中检查和避免错误，无论是对于开发人员的个人素质还是团队管理，都提出了不小的挑战。如果这些棘手而机械的问题可以被机器恰当的处理，那简直是再好不过了。&lt;/p&gt;
&lt;p&gt;这就是垃圾回收（Garbage Collection）的产生的主要背景和原因。作为目前最热门的自动内存管理机制，几乎所有的现代语言及虚拟机都在某种程度上面使用了垃圾回收，它很好的解决了上面所说的内存问题。当然它也有自己的不足之处：在某些情况下，它过分的复杂了[&lt;a href=&quot;#ref-3&quot;&gt;3&lt;/a&gt;]。它使用一个额外的运行时系统来标记、收集、清理未使用的内存[&lt;a href=&quot;#ref-4&quot;&gt;4&lt;/a&gt;]，对于某些高性能要求的程序来说，往往需要付出相当的努力来优化GC导致的性能影响。&lt;/p&gt;
&lt;p&gt;Rust，我们的主角，使用&lt;em&gt;&lt;a href=&quot;http://doc.rust-lang.org/stable/book/ownership.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ownership&lt;/a&gt;&lt;/em&gt;和&lt;em&gt;borrowing&lt;/em&gt;这两个概念来完成自动内存管理。它在确保内存安全的同时，可以避免额外的性能开销。&lt;/p&gt;
&lt;p&gt;在Rust中，我们可以假设任意一个栈上的值都只存在一个&lt;em&gt;owner&lt;/em&gt;。这意味着对某一特定的内存区域，同一时刻只存在一个可写的变量指向它。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; foo = &lt;span class=&quot;built_in&quot;&gt;vec!&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 我们创建了一个具有元素1，2，3的向量A，并将它的所有权交由一个局部变量`foo`。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; bar = foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 现在我们将向量A的所有权交由bar。至此，`foo`将无法再次访问。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于只有一个有效的绑定存在。那么当绑定离开作用域（被&lt;code&gt;{&lt;/code&gt;和&lt;code&gt;}&lt;/code&gt;所包含的区域），所拥有的资源（内存，文件句柄，网络句柄等）便可以自动且安全的被释放掉。虽然听上去可能有些复杂，但不难发现，这个手段其实是非常常见且有效的方法。它有些类似于C++中的&lt;code&gt;std::auto_ptr&amp;lt;T&amp;gt;&lt;/code&gt;组件，但却是通过编译时检查来完成，甚至没有&lt;code&gt;std::auto_ptr&amp;lt;T&amp;gt;&lt;/code&gt;所带来的额外消耗。这也就是Rust的杀手特性，使它既拥有现代语言安全的内存，也保留了C/C++类语言的效率。&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;goals&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-目标&quot;&gt;&lt;a href=&quot;#2-目标&quot; class=&quot;headerlink&quot; title=&quot;2 目标&quot;&gt;&lt;/a&gt;2 目标&lt;/h2&gt;&lt;p&gt;我喜欢通过做一些简单的、生产场景的小项目来学习一个新的语言，这样既有趣也方便在实际的上下文场景里去理解语言的特性。现在我选择编写一个类似于Chat Roulette的匿名文本聊天服务来学习Rust，这是由于聊天服务往往需要在处理多个连接的同时快速做出响应，它不仅能用上不少的Rust特性，还能被用做测试对比Rust的实际性能和内存印迹。&lt;/p&gt;
&lt;p&gt;这系列文章的最终目标将是产生一个可执行文件以及一系列部署脚本，并将它们成功的部署运行在一些云服务器上面。&lt;/p&gt;
&lt;p&gt;开始动手写代码之前，我们先稍微花上一些时间来分析在线服务中相当重要的一个议题：I/O操作。&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;approaches-to-io&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-关于I-O的初步考量&quot;&gt;&lt;a href=&quot;#3-关于I-O的初步考量&quot; class=&quot;headerlink&quot; title=&quot;3 关于I/O的初步考量&quot;&gt;&lt;/a&gt;3 关于I/O的初步考量&lt;/h2&gt;&lt;p&gt;为了正常的运转，我们的服务需要通过网络Sockets发送和接受数据。这听上去也许是一个简单的任务，但为了更加有效率的处理输入和输出操作，我们往往需要根据实际情况采用不同的方式，这些方式最主要的区别在于是否阻塞。在默认情况下，当我们等待数据到达或传递时，会进入阻塞状态并阻止其余所有的CPU操作。&lt;/p&gt;
&lt;p&gt;为了同时服务多个用户，避免某个I\O操作阻塞所有的用户请求，我们需要通过某种方式来独立他们。&lt;/p&gt;
&lt;p&gt;最常见的解决方式是为每一个用户创建一个独立的进程，那么阻塞就只能对当前上下文的单个进程造成影响。这种方式简单易于编写，但是会带来额外的性能开销。除了每个进程都需要的额外栈空间[&lt;a href=&quot;#ref-6&quot;&gt;6&lt;/a&gt;]外，每次发生进程&lt;a href=&quot;https://en.wikipedia.org/wiki/Context_switch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;上下文切换&lt;/em&gt;&lt;/a&gt;时都会产生额外的性能开销。现代服务器CPU往往都有8~16个核心，当进程变多时，相当多的时钟都被OS Kernel所占用以保证正确的进行调度行为，更不要说切换中所导致的缓存失效、内存换页等问题。这些开销往往超乎你的想象，你很难通过这种方式编写一个类似于TechCrush、HackerNews或者是Reddit那样拥有超高并发量、超酷的应用。&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;event-loop&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-事件循环&quot;&gt;&lt;a href=&quot;#4-事件循环&quot; class=&quot;headerlink&quot; title=&quot;4 事件循环&quot;&gt;&lt;/a&gt;4 事件循环&lt;/h2&gt;&lt;img src=&quot;/2016/02/15/Rust-in-Details-Part-1/io-multiplex.png&quot; alt=&quot;io-multiplex&quot; title=&quot;io-multiplex&quot;&gt;
&lt;p&gt;出于以上的原因，我们需要一些基于事件循环（Event Loop）的，更加高效的I/O多路复用API。在Linux[&lt;a href=&quot;#ref-7&quot;&gt;7&lt;/a&gt;]下面可以使用&lt;em&gt;epoll&lt;/em&gt;，在FreeBSD或者OS X[&lt;a href=&quot;#ref-8&quot;&gt;8&lt;/a&gt;]下面可以使用&lt;em&gt;kqueue&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;这些API以一种类似的方法工作：在字节流首先从网络到达Sockets并准备好读写时，让他们通过某种方式通知我们，而不是阻塞在原地等待。事件循环以事件的形式通知API调用者，而不是周期性的检查数千个套接字。这个区别对于WebSocket应用程序尤其重要，因为大部分时间里，相当数量的客户端连接往往都是处于Idle状态。而利用异步I/O我们以极低的代价持有单个客户连接。&lt;/p&gt;
&lt;p&gt;有趣的是，这些功能还能被使用在磁盘I/O之中。实际上，事件循环接受所有的文件句柄作为监听对象（*nix世界中的套接字本质上就是文件句柄）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Node.Js的EventLoop的Ruby的EventMachine都以类似的方式工作。同样的还有使用异步I/O的Nginx网络服务器[&lt;a href=&quot;#ref-9&quot;&gt;9&lt;/a&gt;]。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a name=&quot;starting-project&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-初始化工程&quot;&gt;&lt;a href=&quot;#5-初始化工程&quot; class=&quot;headerlink&quot; title=&quot;5 初始化工程&quot;&gt;&lt;/a&gt;5 初始化工程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我会假设你已经安装了Rust，假如你还没有完成这一步的话，请依据&lt;a href=&quot;https://doc.rust-lang.org/book/installing-rust.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;进行操作.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Rust有一套类似于Maven/Composer/npm/rake的发布工具&lt;code&gt;cargo&lt;/code&gt;。它用于管理库依赖、处理构建过程、运行测试组件、简化工程创建等。让我们打开terminal，并执行下面的操作：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cargo new chat --bin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;--bin&lt;/code&gt;是用来告诉Cargo创建一个可执行程序项目而不是一个库项目。作为这段操作的结果，我们将在当前目录下生成一个包含两个文件的chat文件夹：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cargo.toml&lt;/li&gt;
&lt;li&gt;src/main.rs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Cargo.toml&lt;/code&gt;包含了项目信息和所有依赖项的描述（类似于JavaScript的&lt;code&gt;package.json&lt;/code&gt;），而&lt;code&gt;src/main.rs&lt;/code&gt;则是我们工程的入口源文件。&lt;/p&gt;
&lt;p&gt;现在我们就可以通过命令&lt;code&gt;cargo run&lt;/code&gt;来编译、执行程序了。当然，如果我们确实犯了错的话，它也会提示相关的错误信息。&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;event-loop-in-rust&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;6-Rust中的事件循环&quot;&gt;&lt;a href=&quot;#6-Rust中的事件循环&quot; class=&quot;headerlink&quot; title=&quot;6 Rust中的事件循环&quot;&gt;&lt;/a&gt;6 Rust中的事件循环&lt;/h2&gt;&lt;p&gt;是时候用实践来检验理论了，让我们来创建一个简单的事件循环，它将会用于等待新的事件发生。幸运的是，我们并不需要手动处理所有的底层系统调用，有一个Rust库&lt;a href=&quot;https://github.com/carllerche/mio&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;Metal IO&lt;/em&gt;&lt;/a&gt;(简称&lt;em&gt;mio&lt;/em&gt;)已经帮我们做了这些事情。&lt;/p&gt;
&lt;p&gt;如果你还记得的话，我们使用Cargo来进行依赖库文件管理。它默认从Rust的包仓库&lt;a href=&quot;https://crates.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;cargo.io&lt;/em&gt;&lt;/a&gt;下载所需要的库文件。如果你需要使用某个最新的功能时，也可以通过配置直接从其他的Git仓库获取最新版本。&lt;/p&gt;
&lt;p&gt;在完成这个系列文章的时候，cargo.io只存在&lt;code&gt;mio&lt;/code&gt;的0.4版本。由于较新的v0.5版本引入了更多的功能和一些不兼容的API调整，所以我们选择配置&lt;code&gt;Cargo.toml&lt;/code&gt;，并使用最新的版本。&lt;/p&gt;
&lt;figure class=&quot;highlight toml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;[dependencies]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;setting&quot;&gt;mio = &lt;span class=&quot;value&quot;&gt;&amp;#123; git = &lt;span class=&quot;string&quot;&gt;&quot;https://github.com/carllerche/mio&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在添加完依赖后，我们需要在代码中显式的导入它们。所以让我们打开&lt;code&gt;main.rs&lt;/code&gt;，并编辑：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;crate&lt;/span&gt; mio;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; mio::*;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;mio&lt;/code&gt;的使用相当简单。首先，我们通过调用&lt;code&gt;EventLoop::new()&lt;/code&gt;来创建一个事件循环，当然，仅仅有一个事件循环对象并没有太大的用处。我们需要定义一个实现了&lt;code&gt;Handler&lt;/code&gt;接口的&lt;a href=&quot;http://doc.rust-lang.org/stable/book/structs.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;structure&lt;/em&gt;&lt;/a&gt;来驱动它。&lt;/p&gt;
&lt;p&gt;尽管Rust并没有以”常见”的方式支持面向对象范式（OOP），但是结构体可以被视作经典OOP中的类，它们可以实现约定的接口&lt;a href=&quot;http://doc.rust-lang.org/stable/book/traits.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;traits&lt;/em&gt;&lt;/a&gt;来完成静态派发，或者是运行时派发。&lt;/p&gt;
&lt;p&gt;这是我们定义一个struct的方式：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; WebSocketServer;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面为结构WebSocketServer实现&lt;a href=&quot;https://carllerche.github.io/mio/mio/trait.Handler.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Handler&lt;/a&gt;接口：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;impl&lt;/span&gt; Handler &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; WebSocketServer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Traits可以拥有默认的实现，所以Handler只需要我们提供具体的timeout和message类型；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 我们不会在这里涉及过多的细节，所以就让我们直接使用mio实例中的实现好了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Timeout&lt;/span&gt; = usize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Message&lt;/span&gt; = ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们就可以启动事件循环了：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; event_loop = EventLoop::new().unwrap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 创建一个WebSocketServer实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; handler = WebSocketServer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ... 将它以可变引用的方式传入事件循环中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    event_loop.run(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; handler).unwrap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们终于第一次接触到了&lt;em&gt;borrows&lt;/em&gt;，注意最后一行中&lt;code&gt;&amp;amp;mut&lt;/code&gt;的使用。它意味着我们临时的将所有权转移到了另外的绑定中，并且这个绑定是&lt;em&gt;可变的&lt;/em&gt;。&lt;/p&gt;
&lt;img src=&quot;/2016/02/15/Rust-in-Details-Part-1/mut-borrow.png&quot; alt=&quot;mut-borrow&quot; title=&quot;mut-borrow&quot;&gt;
&lt;p&gt;为了简单起见，我们可以使用下面两段伪代码来理解borrowing：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将value绑定至owner&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; owner = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建一个新的作用域，并将所有权转移至borrow&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; borrow = owner;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 现在borrow可以读写值了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    borrow.mutate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 将所有权返还给owner&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    owner = borrow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码差不多等价于：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将value绑定至owner&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; owner = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 将value的所有权暂时可写的转借给borrow&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; borrow = &amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; owner;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    borrow.mutate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 当borrow离开作用域时，将被转借的所有权自动归还给owner&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;em&gt;每个作用域&lt;/em&gt;，只能存在一个&lt;em&gt;mutable borrow&lt;/em&gt;。实际上，当值的所有权被转借出去之后，在所有权被归还之前，原来持有该值的&lt;code&gt;owner&lt;/code&gt;也不能读写该值。&lt;/p&gt;
&lt;p&gt;除此之外，我们还有一种&lt;em&gt;immutable borrowing&lt;/em&gt;的方式，它允许我们只读的访问值。与&lt;code&gt;&amp;amp;mut borrow&lt;/code&gt;不同，它允许我们对同一个变量持有多个只读的绑定，但它隐含了一些特殊规则，如果当前作用域内存在&lt;em&gt;immutable borrowing&lt;/em&gt;，那么我们既不可以改变变量也不可以以&lt;em&gt;mutable&lt;/em&gt;的形式将该变量borrow出去。&lt;/p&gt;
&lt;p&gt;如果这个解释不够清晰，请原谅我并稍微耐下心来。由于borrows几乎遍布于Rust的代码的每一处，所以我们会有更多的机会在实际的代码中理解它。现在让我们回到工程本身。&lt;/p&gt;
&lt;p&gt;通过运行&lt;code&gt;cargo run&lt;/code&gt;，Cargo会自动下载所有需要的依赖，并编译、运行我们的工程。&lt;/p&gt;
&lt;p&gt;似乎让人有些失望，运行的结果只是在terminal中一个闪烁的光标指针。但那意味我们已经成功的将事件循环运行起来了，现在让我们来给他添加一些实际的用处。&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;tcp-server&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;7-TCP服务器&quot;&gt;&lt;a href=&quot;#7-TCP服务器&quot; class=&quot;headerlink&quot; title=&quot;7 TCP服务器&quot;&gt;&lt;/a&gt;7 TCP服务器&lt;/h2&gt;&lt;p&gt;为了创建一个TCP Server来接收WebSocket连接，我们需要使用空间&lt;code&gt;mio::tcp&lt;/code&gt;中一个特殊的结构&lt;code&gt;TcpListener&lt;/code&gt;。并且依据标准的流程创建一个服务器端Tcp Socket，绑定地址、监听、接收连接。下面是相关代码：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; std::net::SocketAddr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; mio::tcp::*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; address = &lt;span class=&quot;string&quot;&gt;&quot;0.0.0.0:10000&quot;&lt;/span&gt;.parse::&amp;lt;SocketAddr&amp;gt;().unwrap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; server_socket = TcpListener::bind(&amp;amp;address).unwrap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;event_loop.register(&amp;amp;server_socket,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Token(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    EventSet::readable(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    PollOpt::edge()).unwrap();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在让我们一行一行的分析上面的代码：&lt;/p&gt;
&lt;p&gt;首先我们需要将TCP相关的空间和套接字结构导入到&lt;code&gt;main.rs&lt;/code&gt;文件中：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; mio::tcp::*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; std::net::SocketAddr;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，我们把字符串&lt;code&gt;&amp;quot;0.0.0.0:10000&amp;quot;&lt;/code&gt;解析为地址的结构体，并使用&lt;code&gt;TcpListener&lt;/code&gt;来启动套接字监听：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; address = &lt;span class=&quot;string&quot;&gt;&quot;0.0.0.0:10000&quot;&lt;/span&gt;.parse::&amp;lt;SocketAddr&amp;gt;().unwrap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; server_socket = TcpListener::bind(&amp;amp;address).unwrap();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也许你会注意到每一行的最后我们都调用了&lt;code&gt;unwrap()&lt;/code&gt;，请先暂时忽略它。现在我们需要把生成的套接字注册进事件循环中：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;event_loop.register(&amp;amp;server_socket,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        Token(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        EventSet::readable(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        PollOpt::edge()).unwrap();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;register&lt;/code&gt;的参数稍微有些复杂：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Token&lt;/em&gt; 是我们传入套接字的一个全局唯一标示符。当我们收到新事件时，我们可以通过这个标示符来确定事件是从哪个套接字产生的。这里我们简单使用&lt;code&gt;Token(0)&lt;/code&gt;作为监听套接字的标示符。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;EventSet&lt;/em&gt; 指明了我们所监听消息的类型：是收到新数据时触发事件，还是发送数据时触发事件，异或是两者都有？&lt;/li&gt;
&lt;li&gt;&lt;em&gt;PollOpt&lt;/em&gt; 指明我触发的类型：&lt;code&gt;PollOpt::edge()&lt;/code&gt;表示我们想要采用&lt;em&gt;边缘触发&lt;/em&gt;而不是&lt;em&gt;水平触发&lt;/em&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;只要对应套接字中有数据可读写时，水平触发即产生新的事件，而边缘触发只在有新数据到达套接字时才会触发事件。你可以参考&lt;a href=&quot;http://stackoverflow.com/questions/1966863/level-vs-edge-trigger-network-event-mechanisms&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StackOverflow&lt;/a&gt;上面的这篇回答获得更多的细节。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在，假如我们通过&lt;code&gt;cargo run&lt;/code&gt;运行当前的程序，并使用&lt;code&gt;lsof&lt;/code&gt;命令，就可以看到如下的输出：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ lsof -i :&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;COMMAND   PID        USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chat    &lt;span class=&quot;number&quot;&gt;58490&lt;/span&gt; &amp;lt;your user&amp;gt;   &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;u   IPv4 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x333c1924c045ccc7      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;t0  TCP *:ndmp (LISTEN)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a name=&quot;accepting-connections&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;8-接受连接&quot;&gt;&lt;a href=&quot;#8-接受连接&quot; class=&quot;headerlink&quot; title=&quot;8 接受连接&quot;&gt;&lt;/a&gt;8 接受连接&lt;/h2&gt;&lt;p&gt;所有的WebSocket连接都从一次&lt;em&gt;握手&lt;/em&gt;协议开始，这个协议由一些特殊的HTTP请求、应答序列组成。因此，为了实现WebSocket，我们必须教会我们的程序学会理解HTTP/1.1。当然，我们可以只需要关注其中与建立连接相关的内容：&lt;/p&gt;
&lt;p&gt;所有想要以WebSocket形式连接的客户端首先需要发送一个带有&lt;code&gt;Connection: Upgrade&lt;/code&gt;头信息的HTTP，然后我们以特定的方式响应。&lt;/p&gt;
&lt;img src=&quot;/2016/02/15/Rust-in-Details-Part-1/ws-headers.png&quot; alt=&quot;ws-headers&quot; title=&quot;ws-headers&quot;&gt;
&lt;p&gt;在开始实现HTTP协议之前，我们需要先接受客户端连接，并在事件循环中订阅它们的消息。&lt;/p&gt;
&lt;p&gt;下面就是最基础的实现：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; std::collections::HashMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; WebSocketServer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    socket: TcpListener,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clients: HashMap&amp;lt;Token, TcpStream&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    token_counter: usize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; SERVER_TOKEN: Token = Token(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;impl&lt;/span&gt; Handler &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; WebSocketServer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Timeout&lt;/span&gt; = usize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Message&lt;/span&gt; = ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ready&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, event_loop: &amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; EventLoop&amp;lt;WebSocketServer&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             token: Token, events: EventSet)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; token &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            SERVER_TOKEN =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; client_socket = &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.socket.accept() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;Err&lt;/span&gt;(e) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;built_in&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Accept error: &amp;#123;&amp;#125;&quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;Ok&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;None&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;unreachable!&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Accept has returned &#39;None&#39;&quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;Ok&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Some&lt;/span&gt;((sock, addr))) =&amp;gt; sock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.token_counter += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; new_token = Token(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.token_counter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.clients.insert(new_token, client_socket);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                event_loop.register(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.clients[&amp;amp;new_token],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    new_token, EventSet::readable(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    PollOpt::edge() | PollOpt::oneshot()).unwrap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这次给出了一大段代码，让我们来逐一分析其中的要点。&lt;/p&gt;
&lt;p&gt;首先我们的服务结构&lt;code&gt;WebSocketServer&lt;/code&gt;必然是有状态的：他需要记录当前的监听套接字和所有当前已经连接的客户端。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; std::collections::HashMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; WebSocketServer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    socket: TcpListener,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clients: HashMap&amp;lt;Token, TcpStream&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    token_counter: usize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里，我们使用标准库&lt;code&gt;std::collections&lt;/code&gt;中的&lt;a href=&quot;https://doc.rust-lang.org/std/collections/struct.HashMap.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;来储存客户端连接。并为每一个客户端连接生成一个全局唯一的&lt;em&gt;token&lt;/em&gt;作为它的标示符。&lt;/p&gt;
&lt;p&gt;为了简单起见，我们使用了一个记录器&lt;code&gt;token_counter&lt;/code&gt;，并升序的使用它为每个连接生成新的&lt;em&gt;token&lt;/em&gt;。接下来，让我们再次深入&lt;code&gt;mio::Handler&lt;/code&gt;接口：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;impl&lt;/span&gt; Handler &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; WebSocketServer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我们需要&lt;em&gt;覆盖（override）&lt;/em&gt;接口中的回调函数&lt;code&gt;ready&lt;/code&gt;。覆盖意味者&lt;code&gt;Handler&lt;/code&gt;接口已经为&lt;code&gt;ready&lt;/code&gt;做了一个默认的实现（虽然并没有什么用处），现在我们将它替换为自己的版本。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ready&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, event_loop: &amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; EventLoop&amp;lt;WebSocketServer&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         token: Token, events: EventSet)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每当有任何套接字可供访问，在事件循环中就会触发一个新的事件，并调用上面的函数。每次被调用，我们可以通过传入的参数来获得相关信息：触发事件的循环实例&lt;code&gt;event_loop&lt;/code&gt;、触发事件套接字的&lt;code&gt;token&lt;/code&gt;、以及一个位标志符号&lt;code&gt;events&lt;/code&gt;，用于指明当前发生事件的套接字是否&lt;em&gt;readable&lt;/em&gt;或&lt;em&gt;writable&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;每当一个新的客户端开始进入请求队列，并且准备好连接时，我们都会收到一个来自于监听套接字产生的&lt;em&gt;readable&lt;/em&gt;事件。&lt;/p&gt;
&lt;p&gt;现在，我们通过&lt;a href=&quot;https://doc.rust-lang.org/book/match.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;模式匹配&lt;/a&gt;来确定&lt;code&gt;token&lt;/code&gt;是否等价于&lt;code&gt;SERVER_TOKEN&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; token &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SERVER_TOKEN =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面这段代码中，我们可以将关键字&lt;code&gt;match&lt;/code&gt;简单的理解为Java语言中的&lt;em&gt;switch&lt;/em&gt;，并辅以更强大的特性。比如在Java中，&lt;code&gt;switch&lt;/code&gt;只能匹配数字、字符串以及枚举型。而在Rust中，&lt;code&gt;match&lt;/code&gt;还可以匹配范围、多值、以及结构体等等，它甚至可以通过固定的模式，从匹配对象中提取特定元素，就像我们使用正则表达式一样。&lt;/p&gt;
&lt;p&gt;在这里，我们仅仅使用它来匹配一个预定义好的，用于绑定在监听套接字上面的&lt;code&gt;Token(0)&lt;/code&gt;。除此之外，我们使用关键字&lt;code&gt;const&lt;/code&gt;来常量化这一绑定。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; SERVER_TOKEN: Token = Token(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么上面的&lt;code&gt;match&lt;/code&gt;表达式可以等价于&lt;code&gt;match { Token(0) =&amp;gt; ... }&lt;/code&gt;。现在我们可以确定这个事件来自于监听套接字，并开始接受一个客户端连接了。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; client_socket = &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.socket.accept() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Err&lt;/span&gt;(e) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Accept error: &amp;#123;&amp;#125;&quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Ok&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;None&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;unreachable!&lt;/span&gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Ok&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Some&lt;/span&gt;((sock, addr))) =&amp;gt; sock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;accept()&lt;/code&gt;函数会产生一个类型为&lt;code&gt;Result&amp;lt;Option&amp;lt;TcpStream&amp;gt;&amp;gt;&lt;/code&gt;的返回值。&lt;a href=&quot;https://doc.rust-lang.org/std/result/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Result&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;是一个Rust中相当常见的错误处理组件，它将不确定的结果，与诸如超时等错误一块封装起来，供调用者决定进一步的处理方式。这里我们再次对&lt;code&gt;accept()&lt;/code&gt;的返回值使用匹配技术。&lt;/p&gt;
&lt;p&gt;现在你还记得我们之前在&lt;code&gt;Result&lt;/code&gt;返回值上面频繁使用的&lt;code&gt;unwrap()&lt;/code&gt;函数吗？如果当前的&lt;code&gt;Result&lt;/code&gt;当中包含任何错误，这个函数会直接中断程序的执行；反之则返回相对应的结果&lt;code&gt;T&lt;/code&gt;。我们可以把它当做一个便捷的断言来使用。&lt;/p&gt;
&lt;p&gt;当然，在某些情况下我们并不想让错误中断程序。比如现在，因为这样会中断所有已经连线的客户端。所以我们决定自行处理可能的错误，并将它简单的打印出来以供调试：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Err&lt;/span&gt;(e) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Accept error: &amp;#123;&amp;#125;&quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://doc.rust-lang.org/std/option/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;是另一个类似于&lt;code&gt;Result&lt;/code&gt;的封装类型，它用于指明返回值是否存在。如果存在的话，它实际的值将是一个包装的&lt;code&gt;Some(value)&lt;/code&gt;，反之则是&lt;code&gt;None&lt;/code&gt;。你也许会把&lt;code&gt;None&lt;/code&gt;和其他语言中的&lt;em&gt;null&lt;/em&gt;或者&lt;em&gt;nil&lt;/em&gt;搞混，但他们无论从实现上还是使用上都相当的不同。除非你显式声明，否则使用&lt;code&gt;Option&lt;/code&gt;永远不会让你的程序产生类似于&lt;code&gt;NullReferenceException&lt;/code&gt;之类的错误。同样的，&lt;code&gt;unwrap()&lt;/code&gt;函数也可以作用于&lt;code&gt;Option&lt;/code&gt;之上，并在返回值为&lt;code&gt;None&lt;/code&gt;时抛出异常中断程序执行。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Ok&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;None&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;unreachable!&lt;/span&gt;(),&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在我们的例子里，只有当我们尝试在一个未开始监听的套接字上面建立连接时，才会返回&lt;code&gt;None&lt;/code&gt;。这是一个永远不应该产生的结果，所以我们直接使用断言&lt;a href=&quot;https://doc.rust-lang.org/core/macro.unreachable!.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;unreachable!()&lt;/code&gt;&lt;/a&gt;，当逻辑运行到此处便终止程序的运行。&lt;/p&gt;
&lt;p&gt;让我们继续考查下一个匹配：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; client_socket = &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.socket.accept() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Ok&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Some&lt;/span&gt;(sock)) =&amp;gt; sock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里看上去更加复杂，也更加有意思。在做模式匹配的同时，这行代码使得&lt;code&gt;client_socket&lt;/code&gt;获得了封装在&lt;code&gt;Result&amp;lt;Option&amp;lt;TcpStream&amp;gt;&amp;gt;&lt;/code&gt;中的值&lt;code&gt;TcpStream&lt;/code&gt;。这里很方便，并且高效率的取得到了封装值，并将其作为表达式的返回结果。这意味着我们可以将&lt;code&gt;match&lt;/code&gt;操作想象成一个函数，它执行模式匹配并返回表达式结果。&lt;/p&gt;
&lt;p&gt;现在我们已经将解封的值绑定至变量&lt;code&gt;client_socket&lt;/code&gt;了。接下来，我们将它储存在Hash表中，并增加我们的&lt;code&gt;token_counter&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; new_token = Token(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.token_counter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.clients.insert(new_token, client_socket);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.token_counter += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，我们用类似于注册监听套接字的方式，将这个新产生的客户端连接注册至事件循环内。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;event_loop.register(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.clients[&amp;amp;new_token],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    new_token, EventSet::readable(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    PollOpt::edge() | PollOpt::oneshot()).unwrap();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你也许会注意到这里我们在&lt;code&gt;PollOpt::edge()&lt;/code&gt;外，附带使用了一个特殊的标志&lt;code&gt;PollOpt::oneshot()&lt;/code&gt;。它告诉事件循环，对于这个句柄，我们仅接受一次触发事件。当事件触发后，它需要将句柄从事件循环中自动移除。使用这个功能可以让我们避免记录某个句柄当前特定的状态，从而简化程序。每次收到触发事件后，我们将手动的把它重新注册回事件循环内。&lt;/p&gt;
&lt;p&gt;好了，现在我们可以开始初始化核心结构&lt;code&gt;WebSocketServer&lt;/code&gt;，并开始运行事件循环了。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; server = WebSocketServer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    token_counter: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,        &lt;span class=&quot;comment&quot;&gt;// token_counter将从1开始计数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clients: HashMap::new(), &lt;span class=&quot;comment&quot;&gt;// 创建一个空的Hash表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    socket: server_socket    &lt;span class=&quot;comment&quot;&gt;// 持有的服务器套接字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;event_loop.register(&amp;amp;server.socket,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    SERVER_TOKEN,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    EventSet::readable(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    PollOpt::edge()).unwrap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;event_loop.run(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; server).unwrap();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a name=&quot;parsing-http&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;9-解析HTTP&quot;&gt;&lt;a href=&quot;#9-解析HTTP&quot; class=&quot;headerlink&quot; title=&quot;9 解析HTTP&quot;&gt;&lt;/a&gt;9 解析HTTP&lt;/h2&gt;&lt;p&gt;现在，我们可以接受客户端连接，通过解析它们的HTTP请求，将连接&lt;em&gt;upgrade&lt;/em&gt;至WebSocket协议。&lt;/p&gt;
&lt;p&gt;解析HTTP包含了许多无聊的细节，所以我们并不打算在这里过分的深入。我们会向项目里增加另外一个第三方库&lt;code&gt;http-muncher&lt;/code&gt;来处理这些问题（它是通过包装Node.Js的HTTP解析器并导入至Rust来实现的）。它允许我们以流模式解析HTTP请求，这对于一个TCP连接来说相当的有用。&lt;/p&gt;
&lt;p&gt;类似的，先在&lt;code&gt;Cargo.toml&lt;/code&gt;文件中增加下面的内容：&lt;/p&gt;
&lt;figure class=&quot;highlight toml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;[dependencies]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;setting&quot;&gt;http-muncher = &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;让我们跳过关于API的细节，并直接使用它们来解析HTTP:&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;crate&lt;/span&gt; http_muncher;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; http_muncher::&amp;#123;Parser, ParserHandler&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; HttpParser;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;impl&lt;/span&gt; ParserHandler &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; HttpParser &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; WebSocketClient &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    socket: TcpStream,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    http_parser: Parser&amp;lt;HttpParser&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;impl&lt;/span&gt; WebSocketClient &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;read&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;loop&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; buf = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;number&quot;&gt;2048&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.socket.try_read(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; buf) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;Err&lt;/span&gt;(e) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Error while reading socket: &amp;#123;:?&amp;#125;&quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;Ok&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;None&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;// 套接字缓存内没有更多的字节了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;Ok&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Some&lt;/span&gt;(len)) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.http_parser.parse(&amp;amp;buf[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;..len]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.http_parser.is_upgrade() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;new&lt;/span&gt;&lt;/span&gt;(socket: TcpStream) -&amp;gt; WebSocketClient &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        WebSocketClient &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            socket: socket,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            http_parser: Parser::request(HttpParser)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;并对&lt;code&gt;WebSocketServer&lt;/code&gt;的&lt;code&gt;ready&lt;/code&gt;回调函数些做出一些修改：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; token &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SERVER_TOKEN =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.clients.insert(new_token, WebSocketClient::new(client_socket));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        event_loop.register(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.clients[&amp;amp;new_token].socket, new_token, EventSet::readable(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            PollOpt::edge() | PollOpt::oneshot()).unwrap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    token =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; client = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.clients.get_mut(&amp;amp;token).unwrap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        client.read();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        event_loop.reregister(&amp;amp;client.socket, token, EventSet::readable(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              PollOpt::edge() | PollOpt::oneshot()).unwrap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好了，现在让我再次逐一的分析上面的代码。&lt;/p&gt;
&lt;p&gt;首先，我们将HTTP解析库导入至程序内，并声明一个专用的处理结构&lt;code&gt;HttpParser&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;crate&lt;/span&gt; http_muncher;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; http_muncher::&amp;#123;Parser, ParserHandler&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; HttpParser;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;impl&lt;/span&gt; ParserHandler &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; HttpParser &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们需要实现接口&lt;code&gt;ParserHandler&lt;/code&gt;，就如同我们为&lt;code&gt;WebSocketServer&lt;/code&gt;实现&lt;code&gt;mio::Handler&lt;/code&gt;接口一样。它声明了一些在解析HTTP过程中，可能会调用回调函数，比如解析到新的HTTP头信息，Request Body等。现在我们先将注意暂时集中在建立WebSocket连接，并使用&lt;code&gt;ParserHandler&lt;/code&gt;的默认实现。&lt;/p&gt;
&lt;p&gt;由于HTTP解析器是带状态的，这意味我们需要为每一个客户端建立一个记录这些状态的实例。那么我们就创建一个新的结构来描述它：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; WebSocketClient &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    socket: TcpStream,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    http_parser: Parser&amp;lt;HttpParser&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，我们会使用这个结构将&lt;code&gt;HashMap&amp;lt;Token, TcpStream&amp;gt;&lt;/code&gt;替换为&lt;code&gt;HashMap&amp;lt;Token, WebSocketClient&amp;gt;&lt;/code&gt;。除了解析器本身的状态外，我们还会使用&lt;code&gt;WebSocketClient&lt;/code&gt;来记录那些从客户端传递上来的数据。为了避免&lt;code&gt;ready()&lt;/code&gt;函数过分的膨胀，变得不可维护。我们读写客户端数据的相关代码实现为新结构的成员函数：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;impl&lt;/span&gt; WebSocketClient &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;read&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于已经拥有了所需要的状态记录，所以它并不需要额外的参数。&lt;/p&gt;
&lt;p&gt;现在我们可以开始读取数据了：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;loop&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; buf = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;number&quot;&gt;2048&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.socket.try_read(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; buf) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来的事情就简单了：我们分配一些内存空间用于保存原始数据，并开启一个循环，依次的从中读取。由于&lt;code&gt;try_read&lt;/code&gt;可能会产生一些错误，所以我们首先要通过匹配它的返回值&lt;code&gt;Result&lt;/code&gt;来处理他们：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.socket.try_read(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; buf) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Err&lt;/span&gt;(e) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Error while reading socket: &amp;#123;:?&amp;#125;&quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假如当前缓存中所有的数据都已经被读取完毕，它会返回一个&lt;code&gt;Ok(None)&lt;/code&gt;作为结果。在这种情形下，我们中断这个读取循环，并等待下一个事件消息。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.socket.try_read(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; buf) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Ok&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;None&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，我们处理那些&lt;code&gt;try_read&lt;/code&gt;返回的有效数据结果：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.socket.try_read(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; buf) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Ok&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Some&lt;/span&gt;(len)) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.http_parser.parse(&amp;amp;buf[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;..len]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.http_parser.is_upgrade() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我们将数据的一个&lt;em&gt;slice&lt;/em&gt;提供给了解析器供其分析，并检查这个请求是否提供了一个&lt;code&gt;Connection: Upgrade&lt;/code&gt;头信息来&lt;em&gt;upgrade&lt;/em&gt;当前的连接。&lt;/p&gt;
&lt;p&gt;除了&lt;code&gt;read&lt;/code&gt;之外，我们编写了一个&lt;code&gt;new&lt;/code&gt;方法用于生成一个新的&lt;code&gt;WebSocketClient&lt;/code&gt;实例。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;new&lt;/span&gt;&lt;/span&gt;(socket: TcpStream) -&amp;gt; WebSocketClient &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WebSocketClient &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        socket: socket,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        http_parser: Parser::request(HttpParser)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的函数被称为&lt;em&gt;关联函数（associated function）&lt;/em&gt;，它有些类似于常见OOP语言中的静态函数。这里使用new作为关联函数的名称，被用作构造器使用，这是一个Rust中较为常见的写法和命名约定。我们当然可以不使用它，而手工声明每一个&lt;code&gt;WebSocketClient&lt;/code&gt;结构，但是遵循&lt;a href=&quot;https://en.wikipedia.org/wiki/Don&amp;#39;t_repeat_yourself&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DRY&lt;/a&gt;并不是一个坏主意。&lt;/p&gt;
&lt;p&gt;你可能会注意到：我们并没有显式的使用&lt;code&gt;return&lt;/code&gt;关键字来返回函数的结果，Rust允许我们隐式的将最后一行表达式执行结果作为函数的返回值。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http_parser: Parser::request(HttpParser)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们在这里通过调用类型方法&lt;code&gt;Parser::request&lt;/code&gt;，将之前创建的类型HttpParser实例化并作为参数，创建了一个&lt;code&gt;Parser&lt;/code&gt;的新实例，&lt;/p&gt;
&lt;p&gt;现在让我们返回服务器部分的代码，需要作出一些相应的修改：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;match token &amp;#123;&amp;#10;    SERVER_TOKEN =&amp;#62; &amp;#123; ... &amp;#125;,&amp;#10;    token =&amp;#62; &amp;#123;&amp;#10;        let mut client = self.clients.get_mut(&amp;#38;token).unwrap();&amp;#10;        client.read();&amp;#10;        event_loop.reregister(&amp;#38;client.socket, token, EventSet::readable(),&amp;#10;                              PollOpt::edge() | PollOpt::oneshot()).unwrap();&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里增加了一个新的匹配表达式来获得所有非&lt;code&gt;SERVER_TOKEN&lt;/code&gt;的&lt;em&gt;token&lt;/em&gt;，标示当前的事件是由某个客户端套接字触发的。&lt;/p&gt;
&lt;p&gt;在获得&lt;em&gt;token&lt;/em&gt;之后，我们就可以使用它从Hash表中以&lt;em&gt;mutable reference&lt;/em&gt;的形式获得相对应的客户端实例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let mut client = self.clients.get_mut(&amp;#38;token).unwrap();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在让我们执行相应的&lt;code&gt;read&lt;/code&gt;函数：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;client.read();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在最后，由于我们使用了&lt;code&gt;oneshot()&lt;/code&gt;标示。所以我们需要重新将当前客户端的套接字注册进事件循环当中。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;event_loop.reregister(&amp;#38;client.socket, token, EventSet::readable(),&amp;#10;                      PollOpt::edge() | PollOpt::oneshot()).unwrap();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里，我们使用&lt;code&gt;reregister&lt;/code&gt;函数而不是&lt;code&gt;register&lt;/code&gt;函数，其参数保持与之前一致。&lt;/p&gt;
&lt;p&gt;现在，我们可以正确的识别一个客户端是否请求建立WebSocket连接。我们需要开始思考如何响应这些请求。&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;handshake&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;10-握手&quot;&gt;&lt;a href=&quot;#10-握手&quot; class=&quot;headerlink&quot; title=&quot;10 握手&quot;&gt;&lt;/a&gt;10 握手&lt;/h2&gt;&lt;p&gt;最基本的，响应信息内需要附带如下信息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HTTP/1.1 101 Switching Protocols&lt;br&gt;Connection: Upgrade&lt;br&gt;Upgrade: websocket&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;除此之外，WebSocket协议要求我们发送一个被正确处理过的&lt;code&gt;Sec-WebSocket-Accept&lt;/code&gt;头。根据&lt;a href=&quot;https://tools.ietf.org/html/rfc6455#section-4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC6455&lt;/a&gt;中的描述，我们可以这样生成字段值：我们首先将从客户端请求处获得的&lt;code&gt;Sec-WebSocket-Key&lt;/code&gt;头，加上一段特殊字符串(“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”)；然后把它们做SHA-1哈希，以Base64格式生成最终结果。&lt;/p&gt;
&lt;p&gt;Rust标准库内并没有携带SHA-1以及Base64算法，所以我们将选用&lt;em&gt;crates.io&lt;/em&gt;中的一些第三方库来完成这个功能。所以，让我们打开&lt;code&gt;Cargo.toml&lt;/code&gt;并编辑：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[dependencies]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rustc-serialize = &quot;0.3.15&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sha1 = &quot;0.1.1&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;rustc-serialize&lt;/code&gt;包含Base64编码解码相关代码，&lt;code&gt;sha1&lt;/code&gt;包含SHA-1哈希相关代码。具体的使用方式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;crate&lt;/span&gt; sha1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;crate&lt;/span&gt; rustc_serialize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; rustc_serialize::base64::&amp;#123;ToBase64, STANDARD&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;gen_key&lt;/span&gt;&lt;/span&gt;(key: &amp;amp;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; m = sha1::Sha1::new();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; buf = [&lt;span class=&quot;number&quot;&gt;0u8&lt;/span&gt;; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    m.update(key.as_bytes());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    m.update(&lt;span class=&quot;string&quot;&gt;&quot;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&quot;&lt;/span&gt;.as_bytes());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    m.output(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; buf.to_base64(STANDARD);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们以一个指向字符串的引用作为函数&lt;code&gt;gen_key&lt;/code&gt;的参数。在这段函数中，先是生成SHA-1哈希对象，并将字符串作为Key值传递给它，然后根据RFC规范，在将特定的常量数据添加进去，最后返回一个以Base64编码的字符串。&lt;/p&gt;
&lt;p&gt;为了使用这段函数，我们首先需要获得请求中的&lt;code&gt;Sec-WebSocket-Key&lt;/code&gt;字段，我们将在HTTP解析器接口中完成这一功能。也许你还记得，&lt;code&gt;ParserHandler&lt;/code&gt;接口允许我们定义一些回调函数，供解析器在获得新字段是触发调用。现在让我们来实现这些回调函数：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; std::cell::RefCell;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; std::rc::Rc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; HttpParser &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    current_key: &lt;span class=&quot;built_in&quot;&gt;Option&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    headers: Rc&amp;lt;RefCell&amp;lt;HashMap&amp;lt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;impl&lt;/span&gt; ParserHandler &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; HttpParser &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;on_header_field&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, s: &amp;amp;[&lt;span class=&quot;keyword&quot;&gt;u8&lt;/span&gt;]) -&amp;gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.current_key = &lt;span class=&quot;built_in&quot;&gt;Some&lt;/span&gt;(std::str::from_utf8(s).unwrap().to_string());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;on_header_value&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, s: &amp;amp;[&lt;span class=&quot;keyword&quot;&gt;u8&lt;/span&gt;]) -&amp;gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.headers.borrow_mut()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .insert(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.current_key.clone().unwrap(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    std::str::from_utf8(s).unwrap().to_string());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;on_headers_complete&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这些代码并不复杂，但它引入了一个新的概念&lt;em&gt;共享所有权&lt;/em&gt;（shared ownership）。&lt;/p&gt;
&lt;p&gt;正如同你所知道的，在Rust中，任一栈上面的值对象都只存在一个所有者。而对于堆上面的对象，我们可以有更多的选择。比如在现在我们既需要在解析器回调函数中写入数据，也需要在其他地方读取写入的值。这意味着我们需要在&lt;code&gt;WebSocketClient&lt;/code&gt;和&lt;code&gt;ParserHandler&lt;/code&gt;之间共享&lt;code&gt;handlers&lt;/code&gt;所指向的数据。&lt;/p&gt;
&lt;img src=&quot;/2016/02/15/Rust-in-Details-Part-1/ref-count.png&quot; alt=&quot;ref-count&quot; title=&quot;ref-count&quot;&gt;
&lt;p&gt;我们可以采用&lt;a href=&quot;https://doc.rust-lang.org/std/rc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt;来解决这一问题。它是一个基于&lt;em&gt;引用计数&lt;/em&gt;的包装结构，提供了针对堆上不可变对象的所有权共享服务。你可以把它看做C/C++中的&lt;code&gt;std::shared_ptr&lt;/code&gt;。当我们需要额外的所有权时，我们只需要针对&lt;code&gt;Rc&lt;/code&gt;对象调用&lt;code&gt;clone()&lt;/code&gt;即可，它所指向的数据会在最后一个所有者离开作用域后被自动清理掉。&lt;/p&gt;
&lt;p&gt;但是这里还有一个问题：那就是&lt;code&gt;Rc&lt;/code&gt;所包含的对象是&lt;em&gt;不可变&lt;/em&gt;的，由于编译器的限制，我们将无法修改它。这与Rust关于可变性的原则是相符的，要么允许任意多个不可变的borrow，要么只能存在一个可写的borrow。&lt;/p&gt;
&lt;p&gt;标准库中的&lt;code&gt;Cell&lt;/code&gt;和&lt;br&gt;&lt;a href=&quot;https://doc.rust-lang.org/core/cell/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;通过&lt;em&gt;内部可见性&lt;/em&gt;的概念被构造来解决这一使用场景。它标示着我们将相关的&lt;em&gt;静态编译时&lt;/em&gt;检查延后至&lt;em&gt;运行时&lt;/em&gt;来进行。在这里我们将会构造一个双层包装的容器&lt;code&gt;Rc&amp;lt;RefCell&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;让我们继续看下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.headers.borrow_mut()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .insert(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.current_key.clone().unwrap(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的用法与&lt;code&gt;&amp;amp;mut&lt;/code&gt;引用类似，但唯一需要注意到的是，关于可写转借的检查被移动至了运行期，需要由我们确定当前仅有一个可写转借存在。在这里&lt;code&gt;headers&lt;/code&gt;变量的实际拥有者变为了&lt;code&gt;WebSocketClient&lt;/code&gt;实例。让我们根据这一需求调整构造函数中的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 导入标准库中的RefCell与Rc模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; std::cell::RefCell;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; std::rc::Rc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; WebSocketClient &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    socket: TcpStream,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    http_parser: Parser&amp;lt;HttpParser&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 用于储存解析过程中所获得的头描述信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    headers: Rc&amp;lt;RefCell&amp;lt;HashMap&amp;lt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;impl&lt;/span&gt; WebSocketClient &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;new&lt;/span&gt;&lt;/span&gt;(socket: TcpStream) -&amp;gt; WebSocketClient &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; headers = Rc::new(RefCell::new(HashMap::new()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        WebSocketClient &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            socket: socket,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 我们在这里产生对`headers`指向对象的所有权&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            headers: headers.clone(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            http_parser: Parser::request(HttpParser &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                current_key: &lt;span class=&quot;built_in&quot;&gt;None&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// ... 然后在这里产生另一个对`headers`指向对象的所有权&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                headers: headers.clone()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在&lt;code&gt;WebSocketClient&lt;/code&gt;可以访问被解析的HTTP头了，当然也包括我们最关心的那一个：&lt;code&gt;Sec-WebSocket-Key&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Now &lt;code&gt;WebSocketClient&lt;/code&gt; can get access to parsed headers, and, consequently, we can read the header that interests us most, &lt;code&gt;Sec-WebSocket-Key&lt;/code&gt;. Considering we have the key from a client, the response routine boils down to just sending an HTTP string that we combine out of several parts.&lt;/p&gt;
&lt;p&gt;但是我们不能直接在一个非阻塞的环境下发送数据，我们需要设置事件循环，当客户端套接字可写的时候通知我们。我们可以在注册这一套接字的时候通过将&lt;code&gt;EventSet&lt;/code&gt;标记为&lt;code&gt;EventSet::writable()&lt;/code&gt;实现这个目的。&lt;/p&gt;
&lt;p&gt;还记得这一段代码吗？&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;event_loop.reregister(&amp;amp;client.socket, token, EventSet::readable(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      PollOpt::edge() | PollOpt::oneshot()).unwrap();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么我们得将当前感兴趣的客户端事件状态保存下来，所以对&lt;code&gt;WebSocketClient&lt;/code&gt;做一些小修改：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; WebSocketClient &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    socket: TcpStream,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    http_parser: Parser&amp;lt;HttpParser&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    headers: Rc&amp;lt;RefCell&amp;lt;HashMap&amp;lt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 记录当前感兴趣的事件类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    interest: EventSet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;相对应的：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;event_loop.reregister(&amp;amp;client.socket, token,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      client.interest, &lt;span class=&quot;comment&quot;&gt;// 在这里将事件类型传入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      PollOpt::edge() | PollOpt::oneshot()).unwrap();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在唯一需要解决的问题便是事件类型的状态在什么事件，以什么样的结果发生改变。为了简化讨论，让我们将连接的过程确定为几个固定的步骤：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#[derive(PartialEq)]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClientState&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AwaitingHandshake,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    HandshakeResponse,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Connected&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我们定义了一个&lt;em&gt;枚举型&lt;/em&gt;用于描述WebSocket客户端所有可能的状态。&lt;code&gt;AwaitingHandshake&lt;/code&gt;状态表示着我们正在等待HTTP中的一个握手请求；&lt;code&gt;HandshakeResponse&lt;/code&gt;表示我们已经回应了客户端的握手请求；&lt;code&gt;Connected&lt;/code&gt;表示我们成功的创立了基于WebSocket协议的连接。&lt;/p&gt;
&lt;p&gt;让我们把这个状态保存至客户端的结构中：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; WebSocketClient &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    socket: TcpStream,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    http_parser: Parser&amp;lt;HttpParser&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    headers: Rc&amp;lt;RefCell&amp;lt;HashMap&amp;lt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    interest: EventSet,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 保存客户端当前的连接状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state: ClientState&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后针对性的修改构建器：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;impl&lt;/span&gt; WebSocketClient &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;new&lt;/span&gt;&lt;/span&gt;(socket: TcpStream) -&amp;gt; WebSocketClient &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; headers = Rc::new(RefCell::new(HashMap::new()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        WebSocketClient &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            socket: socket,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 初始化监听事件为：是否可读&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            interest: EventSet::readable(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 初始化当前状态为：等待握手&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            state: ClientState::AwaitingHandshake&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们在&lt;code&gt;read&lt;/code&gt;函数中修改客户端状态：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.socket.try_read(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; buf) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Ok&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Some&lt;/span&gt;(len)) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.http_parser.is_upgrade() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后我们在&lt;code&gt;is_upgrade()&lt;/code&gt;所确定的作用域中增加关于状态变化的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.http_parser.is_upgrade() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 将当前的连接状态设置为：响应握手&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.state = ClientState::HandshakeResponse;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 将当前的监听事件切换为：是否可写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.interest.remove(EventSet::readable());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.interest.insert(EventSet::writable());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在我们将监听事件的类型切换为是否可写后，再让我们添加响应握手请求的部分。&lt;/p&gt;
&lt;p&gt;我们将会修改&lt;code&gt;WebSocketServer&lt;/code&gt;结构关于&lt;code&gt;ready&lt;/code&gt;函数的实现，可写事件处理本身并不复杂，我们只需要将它和可读事件处理分割开来。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ready&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, event_loop: &amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; EventLoop&amp;lt;WebSocketServer&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         token: Token, events: EventSet) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 处理可读事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; events.is_readable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 将所有处理读事件的代码移到这里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; token &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            SERVER_TOKEN =&amp;gt; &amp;#123; ... &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 处理所有的可写事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; events.is_writable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; client = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.clients.get_mut(&amp;amp;token).unwrap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        client.write();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        event_loop.reregister(&amp;amp;client.socket, token, client.interest,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              PollOpt::edge() | PollOpt::oneshot()).unwrap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;剩下的事情就更加简单了，我们将构造好的返回值传递给客户端：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;use std::fmt;&amp;#10;...&amp;#10;impl WebSocketClient &amp;#123;&amp;#10;    fn write(&amp;#38;mut self) &amp;#123;&amp;#10;        // &amp;#20174;Rc&amp;#60;RefCell&amp;#60;...&amp;#62;&amp;#62;&amp;#20013;&amp;#33719;&amp;#24471;Hash&amp;#34920;&amp;#10;        let headers = self.headers.borrow();&amp;#10;&amp;#10;        // &amp;#26681;&amp;#25454;`Sec-WebSocket-Key`&amp;#20013;&amp;#30340;&amp;#20540;&amp;#29983;&amp;#25104;&amp;#21709;&amp;#24212;&amp;#20869;&amp;#23481;&amp;#10;        let response_key = gen_key(&amp;#38;headers.get(&amp;#34;Sec-WebSocket-Key&amp;#34;).unwrap());&amp;#10;&amp;#10;        // &amp;#25105;&amp;#20204;&amp;#20351;&amp;#29992;&amp;#20102;&amp;#19968;&amp;#20010;&amp;#29305;&amp;#27530;&amp;#30340;&amp;#20989;&amp;#25968;&amp;#26469;&amp;#26500;&amp;#36896;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#65292;&amp;#20110;&amp;#20854;&amp;#20182;&amp;#20989;&amp;#25968;&amp;#19981;&amp;#21516;&amp;#30340;&amp;#26159;&amp;#12290;&amp;#30001;&amp;#20110;Rust&amp;#24378;&amp;#22823;&amp;#10;        // &amp;#30340;&amp;#23439;&amp;#33021;&amp;#21147;&amp;#65292;&amp;#36825;&amp;#37324;&amp;#30340;&amp;#26500;&amp;#36896;&amp;#23436;&amp;#25104;&amp;#20110;&amp;#32534;&amp;#35793;&amp;#26102;&amp;#32780;&amp;#19981;&amp;#26159;&amp;#36816;&amp;#34892;&amp;#26102;&amp;#12290;&amp;#10;        let response = fmt::format(format_args!(&amp;#34;HTTP/1.1 101 Switching Protocols\r\n\&amp;#10;                                                 Connection: Upgrade\r\n\&amp;#10;                                                 Sec-WebSocket-Accept: &amp;#123;&amp;#125;\r\n\&amp;#10;                                                 Upgrade: websocket\r\n\r\n&amp;#34;, response_key));&amp;#10;&amp;#10;        // &amp;#23558;Response&amp;#20889;&amp;#20837;&amp;#22871;&amp;#25509;&amp;#23383;&amp;#10;        self.socket.try_write(response.as_bytes()).unwrap();&amp;#10;&amp;#10;        // &amp;#25913;&amp;#21464;&amp;#24403;&amp;#21069;&amp;#30340;&amp;#29366;&amp;#24577;&amp;#20026;&amp;#65306;&amp;#36830;&amp;#25509;&amp;#25104;&amp;#21151;&amp;#10;        self.state = ClientState::Connected;&amp;#10;&amp;#10;        // &amp;#23558;&amp;#24403;&amp;#21069;&amp;#30340;&amp;#30417;&amp;#21548;&amp;#20107;&amp;#20214;&amp;#20999;&amp;#25442;&amp;#20026;&amp;#65306;&amp;#26159;&amp;#21542;&amp;#21487;&amp;#35835;&amp;#10;        self.interest.remove(EventSet::writable());&amp;#10;        self.interest.insert(EventSet::readable());&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在让我们使用浏览器来测试连接这个WebSocket服务器。在你的浏览器中打开开发者窗口（一般是按&lt;code&gt;F12&lt;/code&gt;），并输入如下的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ws = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WebSocket(&lt;span class=&quot;string&quot;&gt;&#39;ws://127.0.0.1:10000&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ws.readyState == WebSocket.OPEN) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Connection is successful&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;/2016/02/15/Rust-in-Details-Part-1/connection-success.png&quot; alt=&quot;connection-success&quot; title=&quot;connection-success&quot;&gt;
&lt;p&gt;看起来连接已经成功的创建了！&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;真是令人难以相信，我们接触了如此多的语言概念和功能，但这仅仅只是后续文章的开始（是的，依然如同本章一样冗长和底层）。为了实现我们的聊天程序，还需要对安全、多进程、性能测试、通讯协议等议题进行讨论。在这之前，我们应该先好好的重构一下现有代码，将通用部分从程序中抽离出来作为一个库，也许还能将它提交至&lt;em&gt;crates.io&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;相关的代码：&lt;a href=&quot;https://github.com/nbaksalyar/rust-chat/tree/part-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;&lt;br&gt;相关的Reddit讨论：&lt;a href=&quot;https://www.reddit.com/r/programming/comments/3of35e/rust_in_detail_writing_scalable_chat_service_from/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#1&lt;/a&gt;, &lt;a href=&quot;https://www.reddit.com/r/rust/comments/3oczn3/rust_in_detail_writing_scalable_chat_service_from/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#2&lt;/a&gt;, &lt;a href=&quot;https://www.reddit.com/r/rust/comments/3oczn3/rust_in_detail_writing_scalable_chat_service_from/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#3&lt;/a&gt;, &lt;a href=&quot;https://www.reddit.com/r/programming/comments/3csjza/rust_in_detail_writing_scalable_chat_service_from/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;resources&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;相关资源&quot;&gt;&lt;a href=&quot;#相关资源&quot; class=&quot;headerlink&quot; title=&quot;相关资源&quot;&gt;&lt;/a&gt;相关资源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://duartes.org/gustavo/blog/post/journey-to-the-stack/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Journey to the Stack&lt;/a&gt; by Gustavo Duarte; a series of articles that provides a good insight on the inner implementation of the stack and stack frames. It’ll help you to better understand the Rust memory management principles.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://man7.org/tlpi/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Linux Programming Interface&lt;/a&gt; by Michael Kerrisk, 2010&amp;nbsp;&amp;mdash;&amp;nbsp;awesome book on the topic of using system APIs. Despite the title, applicable not only to Linux but to most *nix systems as well.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name=&quot;notes&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;p&gt;&lt;a name=&quot;ref-1&quot;&gt;[1]&lt;/a&gt; Interestingly enough, Rust actually brings &lt;a href=&quot;https://en.wikipedia.org/wiki/Smart_pointer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;smart pointers&lt;/a&gt; to the language level: borrowing is based around ideas akin to C++’s &lt;code&gt;unique_ptr&lt;/code&gt; and &lt;code&gt;shared_ptr&lt;/code&gt;.&amp;nbsp;&lt;a href=&quot;javascript:history.back(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&amp;uarr;&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;ref-2&quot;&gt;[2]&lt;/a&gt; For instance, &lt;a href=&quot;http://lars-lab.jpl.nasa.gov/JPL_Coding_Standard_C.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NASA JPL C Programming Coding Standard&lt;/a&gt; and &lt;dfn title=&quot;Motor Industry Software Reliability Association&quot;&gt;MISRA&lt;/dfn&gt; C standard explicitly forbid dynamic memory allocation with &lt;code&gt;malloc()&lt;/code&gt; and implies local variables allocation on the stack and usage of pre-allocated memory instead.&amp;nbsp;&lt;a href=&quot;javascript:history.back(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&amp;uarr;&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;ref-3&quot;&gt;[3]&lt;/a&gt; While basic garbage collection algos are relatively easy to implement, more smart approaches like concurrent GCs are very non-trivial. In fact, a sign of complexity is that Go getting concurrent GC only in version 1.5 &amp;mdash; almost 3 years since the 1.0 release.&amp;nbsp;&lt;a href=&quot;javascript:history.back(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&amp;uarr;&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;ref-4&quot;&gt;[4]&lt;/a&gt; Strictly speaking, many implementations of &lt;code&gt;malloc()&lt;/code&gt; and &lt;code&gt;free()&lt;/code&gt; functions suffer from a similar overhead as well becase of &lt;a href=&quot;https://en.wikipedia.org/wiki/Fragmentation_(computing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fragmentation&lt;/a&gt;). More on that topic can be found in “&lt;a href=&quot;http://www.design-reuse.com/articles/25090/dynamic-memory-allocation-fragmentation-c.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dynamic Memory Allocation and Fragmentation in C and C++&lt;/a&gt;“ by Colin Walls.&amp;nbsp;&lt;a href=&quot;javascript:history.back(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&amp;uarr;&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;ref-5&quot;&gt;[5]&lt;/a&gt; “Graydon Hoare [&amp;hellip;] started working on a new programming language called Rust in 2006.” &amp;mdash; &lt;a href=&quot;http://www.infoq.com/news/2012/08/Interview-Rust&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;InfoQ: “Interview On Rust”&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;javascript:history.back(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&amp;uarr;&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;ref-6&quot;&gt;[6]&lt;/a&gt; According to &lt;code&gt;pthread_create(3)&lt;/code&gt; manual page, it defaults to 2 MB on 32-bit Linux systems.&amp;nbsp;&lt;a href=&quot;javascript:history.back(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&amp;uarr;&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;ref-7&quot;&gt;[7]&lt;/a&gt; For comparison of &lt;em&gt;epoll&lt;/em&gt; to other system APIs, refer to “&lt;a href=&quot;https://www.kernel.org/doc/ols/2004/ols2004v1-pages-215-226.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Comparing and Evaluating epoll, select, and poll Event Mechanisms&lt;/a&gt;“ by Louay Gammo, Tim Brecht, et&amp;nbsp;al., University of Waterloo, 2004.&amp;nbsp;&lt;a href=&quot;javascript:history.back(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&amp;uarr;&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;ref-8&quot;&gt;[8]&lt;/a&gt; “&lt;a href=&quot;http://people.freebsd.org/~jlemon/papers/kqueue.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kqueue: A generic and scalable event notification facility&lt;/a&gt;“ by Jonathan Lemon, FreeBSD Project.&amp;nbsp;&lt;a href=&quot;javascript:history.back(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&amp;uarr;&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;ref-9&quot;&gt;[9]&lt;/a&gt; “&lt;a href=&quot;http://nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Inside Nginx: How We Designed For Performance Scale&lt;/a&gt;“ by Owen Garrett.&amp;nbsp;&lt;a href=&quot;javascript:history.back(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&amp;uarr;&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;ref-10&quot;&gt;[10]&lt;/a&gt; &lt;a href=&quot;http://www.linuxjournal.com/files/linuxjournal.com/linuxjournal/articles/023/2333/2333s2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;General description&lt;/a&gt; on LinuxJournal.com. If you’re interested in more details, read “&lt;a href=&quot;http://veithen.github.io/2014/01/01/how-tcp-backlog-works-in-linux.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How TCP backlog works in Linux&lt;/a&gt;“ by Andreas Veithen.&amp;nbsp;&lt;a href=&quot;javascript:history.back(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&amp;uarr;&lt;/a&gt;)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;http://markindev.github.io/2016/02/15/Rust-in-Details-Part-1/&quot;&gt;此篇&lt;/a&gt;文章翻译自&lt;a href=&quot;http://nbaksalyar.github.io/2015/11/09/rust-in-detail-1.html&quot;&gt;Rust-In-Details&lt;/a&gt;，已获得作者许可。转载或二次创作请保留本信息。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了更好的了解如何使用Rust来解决一些实际问题，我们将在本系列文章中，逐步的尝试使用Rust来编写一个可扩展的、实时的聊天服务。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Part 1&lt;/em&gt;包含了一些基本的项目配置，和一个简单的Websocket服务器框架。这篇文章相当的深入浅出，并不需要读者有太多关于Rust的背景知识。当然，如果你熟悉POSIX API或者是C/C++，那么肯定会极大的有助于深入理解。最后，这是一篇相当长、而且面向底层的教程，我推荐你先准备上一杯好咖啡。&lt;/p&gt;
&lt;p&gt;好了，让我们开始吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="rust" scheme="http://markindev.github.io/tags/rust/"/>
    
  </entry>
  
</feed>
